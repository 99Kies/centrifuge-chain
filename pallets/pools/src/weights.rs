//! Autogenerated weights for pallet_pools
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-01-26, STEPS: `20`, REPEAT: 100, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("development"), DB CACHE: 128

// Executed Command:
// ./target/release/centrifuge-chain
// benchmark
// --chain
// development
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_pools
// --extrinsic
// *
// --steps
// 20
// --repeat
// 100
// --raw
// --output
// ./pallets/pools/src/weights.rs
// --template
// ./scripts/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_pools.
pub trait WeightInfo {
	fn create(n: u32) -> Weight;
	fn update() -> Weight;
	fn set_metadata(n: u32) -> Weight;
	fn set_max_reserve() -> Weight;
	fn update_tranches(n: u32) -> Weight;
	fn update_invest_order() -> Weight;
	fn update_redeem_order() -> Weight;
	fn collect(n: u32) -> Weight;
	fn approve_role_for(n: u32) -> Weight;
	fn revoke_role_for() -> Weight;
}

/// Weights for pallet_pools using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn create(n: u32) -> Weight {
		(55_888_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((201_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn update() -> Weight {
		(45_113_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn set_metadata(n: u32) -> Weight {
		(46_831_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((56_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn set_max_reserve() -> Weight {
		(46_589_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn update_tranches(n: u32) -> Weight {
		(45_716_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((687_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn update_invest_order() -> Weight {
		(146_706_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn update_redeem_order() -> Weight {
		(182_443_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn collect(n: u32) -> Weight {
		(107_533_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((10_258_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn approve_role_for(n: u32) -> Weight {
		(35_228_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((25_567_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(n as Weight)))
	}
	fn revoke_role_for() -> Weight {
		(59_138_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn create(n: u32) -> Weight {
		(55_888_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((201_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn update() -> Weight {
		(45_113_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn set_metadata(n: u32) -> Weight {
		(46_831_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((56_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn set_max_reserve() -> Weight {
		(46_589_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn update_tranches(n: u32) -> Weight {
		(45_716_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((687_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn update_invest_order() -> Weight {
		(146_706_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn update_redeem_order() -> Weight {
		(182_443_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn collect(n: u32) -> Weight {
		(107_533_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((10_258_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn approve_role_for(n: u32) -> Weight {
		(35_228_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((25_567_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(n as Weight)))
	}
	fn revoke_role_for() -> Weight {
		(59_138_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}
